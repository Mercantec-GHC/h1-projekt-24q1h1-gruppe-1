@page "/products"
@inject List<Headset> allProducts

<PageTitle>Products</PageTitle>

<input @bind="SearchTerm" class="form-control" placeholder="Search by brand, model, color, price etc..." />

<button class="btn btn-primary" @onclick="FilterAndUpdateHeadsets">Search</button>


<br />
<br />

@if (ProductToShow == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="grid-container">
        @foreach (var headset in ProductToShow)
        {
            uint productId = headset.Id;
            <div class="card" style="width: 18rem;">
                <img src="@headset.imageUrl" class="card-img-top" alt="...">
                <div class="card-body">
                    <h5 class="card-title">@headset.brand</h5>
                    <h5 class="card-model-text">@headset.model</h5>
                    <div class="card-seperator"></div>
                    <p class="card-text" style="text-align: center;">
                        PRICE: <span style="font-weight: bold;">$@headset.price</span>  <br />
                    </p>
                    <div class="center-button-class">
                        <a href="product/@productId" class="btn btn-primary">Show Product</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    public string SearchTerm { get; set; } = "";
    public List<Headset> ProductToShow;

    protected override void OnInitialized()
    {
        ProductToShow = allProducts;
    }

    public void FilterAndUpdateHeadsets()
    {
        ProductToShow = FilterBrand(allProducts, SearchTerm.ToLower());
    }

    public List<Headset> FilterBrand(List<Headset> allProducts, string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            string[] searchKeywords = searchTerm.Split(' ');

            return allProducts.Where(headset =>
                searchKeywords.All(keyword =>
                    headset.brand.ToLower().Contains(keyword) ||
                    headset.model.ToLower().Contains(keyword) ||
                    headset.color.ToLower().Contains(keyword) ||
                    headset.frequencyRange.ToLower().Contains(keyword) ||
                    // headset.microphone.ToString().ToLower() == keyword ||
                    headset.typeOfConnection.ToLower().Contains(keyword) ||
                    // headset.noiseCancellation.ToString().ToLower() == keyword ||
                    headset.closedOrOpen.ToLower().Contains(keyword) ||
                    headset.itemCondition.ToLower().Contains(keyword) ||
                    // headset.type.ToLower().Contains(keyword) ||
                    // headset.description.ToLower().Contains(keyword) ||
                    headset.price.ToString().Contains(keyword)
                )
            ).ToList();
        }
        else
        {
            return allProducts;
        }
    }
}