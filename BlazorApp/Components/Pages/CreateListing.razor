@page "/createlisting"
@using Npgsql
@using System.Drawing
@inject IConfiguration config

<PageTitle>Create Listing</PageTitle>

@if (errors.Count > 0)
{
    @foreach (var error in errors)
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
}

<div class="page-container">
    <div class="create-listing-container">
        <h3 class="create-listing-title">CREATE LISTING</h3>

        <div class="create-listing-attributes-container">

            <div class="attributes-container">

                <div class="upload-image-section">
                    <h5>UPLOAD IMAGE</h5>
                    <InputFile OnChange="@OnFileSelected" multiple />
                </div>

                <div class="price-section">
                    <h5>PRICE</h5>
                    <input type="text" @bind="Price" placeholder="Price here" />
                </div>

                <div class="brand-section">
                    <h5>BRAND</h5>
                    <select @bind="Brand">
                        <option value="">Select a Brand</option>
                        <option value="Sony">Sony</option>
                        <option value="Bose">Bose</option>
                        <option value="JBL">JBL</option>
                    </select>
                </div>

                <div class="model-section">
                    <h5>MODEL</h5>
                    <select @bind="Model">
                        <option value="S1">Select a Model</option>
                        <option value="S2">S1</option>
                        <option value="S3">S2</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <div class="frequency-range-section">
                    <h5>FREQUENCY RANGE</h5>
                    <select @bind="FrequencyRange">
                        <option value="">Select a Frequency Range</option>
                        <option value="20-20000hz">20-20000hz</option>
                        <option value="10-50000hz">10-50000hz</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <div class="noise-cancellation-section">
                    <h5>NOISE CANCELLATION</h5>
                    <input type="checkbox" @bind="NoiseCancellation" />
                </div>

                <div class="microphone-section">
                    <h5>MICROPHONE</h5>
                    <input type="checkbox" @bind="Microphone" />
                </div>

                <div class="color-section">
                    <h5>COLOR</h5>
                    <select @bind="Color">
                        <option value="">Select a Color</option>
                        <option value="Red">Red</option>
                        <option value="Rlue">Blue</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <div class="connection-type-section">
                    <h5>CONNECTION TYPE</h5>
                    <select @bind="Type">
                        <option value="">Select a type</option>
                        <option value="WiredHeadphones">Wired Headphones</option>
                        <option value="BluetoothHeadphones">Bluetooth Headphones</option>
                    </select>
                </div>

                <div class="closed-or-open-section">
                    <h5>CLOSED OR OPEN</h5>
                    <select @bind="ClosedOrOpen">
                        <option value="">Select Closed or Open</option>
                        <option value="open">Open</option>
                        <option value="closed">Closed</option>
                    </select>
                </div>

                <div class="condition-section">
                    <h5>CONDITION</h5>
                    <select @bind="ItemCondition">
                        <option value="">Select Item Condition</option>
                        <option value="good">Good</option>
                        <option value="bad">Bad</option>
                    </select>
                </div>

                <div class="description-section">
                    <h5>DESCRIPTION</h5>
                </div>

            </div>
            
        </div>

    </div>



    <div class="preview-listing-container">
        <h3 class="preview-listing-title">PREVIEW</h3>

        <div class="preview-listing-attributes-container">
            <div class="preview-attributes">
                <div class="preview-picture"></div>
                <div class="picture-carousel">
                    <button class="back-button">BACK</button>
                    <button class="next-button">NEXT</button>
                </div>
                <div class="card-seperator"></div>

                @if (Price == null)
                {
                    <h4 class="preview-price-text">Awaiting price</h4>
                } else
                {
                    <h4 class="preview-price-text">$@Price</h4>
                }


                @if (Brand == null)
                {
                    <h2 class="preview-brand-text">Awaiting brand</h2>
                }
                else
                {
                    <h2 class="preview-brand-text">@Brand</h2>
                }


                @if (Model == null)
                {
                    <h3 class="preview-model-text">Awaiting model</h3>
                }
                else
                {
                    <h3 class="preview-model-text">@Model</h3>
                }
                

                
                <div class="card-seperator"></div>

                <div class="preview-text-attributes-flex">

                    <div class="preview-color-section">
                        <p style="font-weight: 600;">COLOR</p>
                        @if (Color == null)
                        {
                            <p>WAITING</p>
                        } 
                        else
                        {
                            <p>@Color</p>
                        }
                    </div>

                    <div class="preview-frequency-range-section">
                        <p style="font-weight: 600;">FREQUENCY RANGE</p>
                        @if (FrequencyRange == null)
                        {
                            <p>WAITING</p>
                        }
                        else
                        {
                            <p>@FrequencyRange</p>
                        }
                    </div>
                    <div class="preview-microphone-section">
                        <p style="font-weight: 600;">MICROPHONE</p>
                        @if (Microphone == null)
                        {
                            <p>WAITING</p>
                        }
                        else
                        {
                            <p>@Microphone</p>
                        }
                    </div>
                    <div class="preview-connection-type-section">
                        <p style="font-weight: 600;">CONNECTION TYPE</p>
                        @if (Type == null)
                        {
                            <p>WAITING</p>
                        }
                        else
                        {
                            if (Type == "WiredHeadphones")
                            {
                                <p>Wired</p>
                            } else if (Type == "BluetoothHeadphones")
                            {
                                <p>Bluetooth</p>
                            }

                        }
                    </div>
                    <div class="preview-noise-cancellation-section">
                        <p style="font-weight: 600;">NOISE CANCELLATION</p>
                        @if (NoiseCancellation == null)
                        {
                            <p>WAITING</p>
                        }
                        else
                        {
                            <p>@NoiseCancellation</p>
                        }
                    </div>
                    <div class="preview-closed-or-open-section">
                        <p style="font-weight: 600;">CLOSED OR OPEN</p>
                        @if (ClosedOrOpen == null)
                        {
                            <p>WAITING</p>
                        }
                        else
                        {
                            <p>@ClosedOrOpen.ToUpper()</p>
                        }
                    </div>
                    <div class="preview-condition-section">
                        <p style="font-weight: 600;">CONDITION</p>
                        @if (ItemCondition == null)
                        {
                            <p>WAITING</p>
                        }
                        else
                        {
                            <p>@ItemCondition.ToUpper()</p>
                        }
                    </div>
                </div>
            </div>
            <div class="publish-button-container">

                <button class="publish-button" @onclick="Submit">PUBLISH</button>

            </div>
        </div>
    </div>
</div>











@code {
    private string? Brand { get; set; }
    private string? Model { get; set; }
    private string? Color { get; set; }
    private string? FrequencyRange { get; set; }
    private bool? Microphone { get; set; }
    private string? TypeOfConnection { get; set; }
    private bool? NoiseCancellation { get; set; }
    private string? ClosedOrOpen { get; set; }
    private string? ItemCondition { get; set; }
    private int? Price { get; set; }
    private string? ImageUrl { get; set; }
    private string? Type { get; set; }

    private long maxFileSize = 1024 * 1024 * 3; // 3 mb
    private int maxAllowedFiles = 3;
    private List<string> errors = new();
    private string ImageFilename;
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed.");
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
                string path = Path.Combine(config.GetValue<string>("FileStorage")!, "", newFileName);
                Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, ""));
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                ImageUrl = path;
                ImageFilename = newFileName;
            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }
    }

    private void Submit()
    {
        string connectionString = "Host=ep-blue-fire-a2nnh5p7.eu-central-1.aws.neon.tech;Username=sonaredb_owner;Password=8LlUVraRtDs9;Database=sonaredb;SSL Mode=Require";
        using var connection = new NpgsqlConnection(connectionString);
        connection.Open();
        using (var cmd = new NpgsqlCommand())
        {
            cmd.Connection = connection;

            cmd.CommandText = @"
            INSERT INTO Headsets(Brand, Model, Color, FrequencyRange, Microphone, TypeOfConnection, NoiseCancellation, ClosedOrOpen, ItemCondition, Price, ImageUrl, Type)
            VALUES(@Brand, @Model, @Color, @FrequencyRange, @Microphone, @TypeOfConnection, @NoiseCancellation, @ClosedOrOpen, @ItemCondition, @Price, @ImageUrl, @Type);";

            cmd.Parameters.AddWithValue("Brand", Brand ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Model", Model ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Color", Color ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("FrequencyRange", FrequencyRange ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Microphone", Microphone ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("TypeOfConnection", TypeOfConnection ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("NoiseCancellation", NoiseCancellation ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("ClosedOrOpen", ClosedOrOpen ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("ItemCondition", ItemCondition ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Price", Price ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("ImageUrl", $"/assets/{ImageFilename}" ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Type", Type ?? (object)DBNull.Value);

            cmd.ExecuteNonQuery();
        }
    }
}