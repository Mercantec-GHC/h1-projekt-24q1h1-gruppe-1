@page "/createlisting"
@using Npgsql
@using System.Drawing

<PageTitle>Create Listing</PageTitle>



<h4 style ="color: white;">Create Listing</h4>

<div class="container-container">
    <div class="container">
        <div class="text-container">
            
            <p>Be a cool cat, sell your shit !</p>
        </div>
        <div class="image-container">
            <img src="/bootstrap/fat-cat2.png" alt="Image of headset with vibrant color background" draggable="false" />
        </div>
    </div>
</div>

<select @bind="Brand">
    <option value="">Select a Brand</option>
    <option value="Sony">Sony</option>
    <option value="Bose">Bose</option>
    <option value="JBL">JBL</option>
</select>

<br />
<br />

<select @bind="Model">
    <option value="S1">Select a Model</option>
    <option value="S2">S1</option>
    <option value="S3">S2</option>
    <option value="Other">Other</option>
</select>

<br />
<br />

<select @bind="Color">
    <option value="">Select a Color..</option>
    <option value="Red">Red</option>
    <option value="Rlue">Blue</option>
    <option value="Other">Other</option>
</select>

<br />
<br />

<select @bind="FrequencyRange">
    <option value="">Select a Frequency Range</option>
    <option value="20-20000hz">20-20000hz</option>
    <option value="10-50000hz">10-50000hz</option>
    <option value="Other">Other</option>
</select>

<br />
<br />

<label style="color: white;">
    <input type="checkbox" @bind="Microphone" />
    Microphone
</label>

<br />
<br />

<select @bind="TypeOfConnection">
    <option value="">Select a Type of Connection</option>
    <option value="WiredHeadphones">WiredHeadphones</option>
    <option value="BluetoothHeadphones">BluetoothHeadphones</option>
</select>

<br />
<br />

<label style="color: white;">
    <input type="checkbox" @bind="NoiseCancellation" />
    Noise Cancellation
</label>

<br />
<br />

<select @bind="ClosedOrOpen">
    <option value="">Select Closed or Open</option>
    <option value="open">Open</option>
    <option value="closed">Closed</option>
</select>

<br />
<br />

<select @bind="ItemCondition">
    <option value="">Select Item Condition</option>
    <option value="good">Good</option>
    <option value="bad">Bad</option>
</select>

<br />
<br />

<label style="color: white;">
    <input type="text" @bind="Price" placeholder="Provide the price in USD..." />
    Price
</label>

<br />
<br />

<!--<label style="color: white;">
    <input type="text" @bind="ImageUrl" placeholder="upload images..." />
    ImageUrl
</label>-->
<label style="color: white;">
    <input type="file" @onchange="OnFileSelected" />
    Upload Image
</label>

<br />
<br />

<select @bind="Type">
    <option value="">Select a type</option>
    <option value="WiredHeadphones">WiredHeadphones</option>
    <option value="BluetoothHeadphones">BluetoothHeadphones</option>
</select>

<br />
<br />

<button @onclick="Submit">Submit</button>

<br /> <br />

@code {
    private string? Brand { get; set; }
    private string? Model { get; set; }
    private string? Color { get; set; }
    private string? FrequencyRange { get; set; }
    private bool? Microphone { get; set; }
    private string? TypeOfConnection { get; set; }
    private bool? NoiseCancellation { get; set; }
    private string? ClosedOrOpen { get; set; }
    private string? ItemCondition { get; set; }
    private int? Price { get; set; }
    private string? ImageUrl { get; set; }
    private string? Type { get; set; }
    private string? ImagePath { get; set; }

    private async Task OnFileSelected(ChangeEventArgs e)
    {
        var file = e.Value as IBrowserFile;
        if (file != null)
        {
            var fileExtension = Path.GetExtension(file.Name);
        
            // Generate a unique filename using a GUID and the original file extension
            var uniqueFileName = $"{Guid.NewGuid()}{fileExtension}";

            var path = Path.Combine("assets", uniqueFileName);
        
            // Save the file
            using var stream = file.OpenReadStream();
            using var fileStream = new FileStream(path, FileMode.Create);
            await stream.CopyToAsync(fileStream);
        
            // Store the unique file path
            ImagePath = path;
        }
    }

    private void Submit()
    {
        string connectionString = "Host=ep-blue-fire-a2nnh5p7.eu-central-1.aws.neon.tech;Username=sonaredb_owner;Password=8LlUVraRtDs9;Database=sonaredb;SSL Mode=Require";
        using var connection = new NpgsqlConnection(connectionString);
        connection.Open();
        using (var cmd = new NpgsqlCommand())
        {
            cmd.Connection = connection;

            cmd.CommandText = @"
            INSERT INTO Headsets(Brand, Model, Color, FrequencyRange, Microphone, TypeOfConnection, NoiseCancellation, ClosedOrOpen, ItemCondition, Price, ImageUrl, Type)
            VALUES(@Brand, @Model, @Color, @FrequencyRange, @Microphone, @TypeOfConnection, @NoiseCancellation, @ClosedOrOpen, @ItemCondition, @Price, @ImageUrl, @Type);";

            cmd.Parameters.AddWithValue("Brand", Brand ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Model", Model ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Color", Color ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("FrequencyRange", FrequencyRange ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Microphone", Microphone ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("TypeOfConnection", TypeOfConnection ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("NoiseCancellation", NoiseCancellation ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("ClosedOrOpen", ClosedOrOpen ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("ItemCondition", ItemCondition ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Price", Price ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("ImageUrl", ImageUrl ?? (object)DBNull.Value);
            cmd.Parameters.AddWithValue("Type", Type ?? (object)DBNull.Value);

            cmd.ExecuteNonQuery();
        }
    }
}