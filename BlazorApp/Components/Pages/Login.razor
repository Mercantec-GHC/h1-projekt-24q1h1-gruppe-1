@page "/login"
@inject UserAccountService UserAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProverider
@using BlazorApp.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager

<div class="login-container">
    <h4 class="login-title">Login</h4>

    <div class="form-group">
        <input class="form-input" type="text" @bind="model.username" placeholder="Username" />
    </div>

    <div class="form-group">
        <input class="form-input" type="password" @bind="model.userpassword" placeholder="Password" />
    </div>

    <button class="form-button" @onclick="Submit">Login</button>

    <div class="signup-container">
        <div>Or sign up using</div>
        <a href="/createuser" class="signup-link">Sign up</a>
    </div>
</div>

@code {

    private class Model
    {
        public string username { get; set; }
        public string userpassword { get; set; }
    }

    private Model model = new Model();

    private async Task Submit()
    {
        var userAccount = UserAccountService.GetByUserName(model.username); // alert message if useraccount returns null or password doesn't match
        if (userAccount == null || userAccount.Password != model.userpassword)
        {
            await js.InvokeVoidAsync("alert", "Invalid Username or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProverider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.UserName
        });
        NavigationManager.NavigateTo("/myprofile", true);
    }
}

