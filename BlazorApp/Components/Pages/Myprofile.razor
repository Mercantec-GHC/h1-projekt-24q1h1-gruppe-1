@page "/myprofile"
@using Npgsql;
@inject NavigationManager NavigationManager
@inject ICookie cookie
@inject List<Headset> allProducts

<h4 style="color: white;">My Profile</h4>

<div class="">
    <img src="/bootstrap/profile.png" style="width: 300px; height: 300px;" />
</div>

<div style="color: white">
    <p><strong>Username:</strong> @username</p>
    <p><strong>Firstname:</strong> @firstname</p>
    <p><strong>Lastname:</strong> @lastname</p>
    <p><strong>Year of birth:</strong> @yearofbirth</p>
    <p><strong>Email:</strong> @email</p>
    <p><strong>Phone number:</strong> @phonenumber</p>
    <p><strong>Address:</strong> @address</p>
    <p><strong>Country:</strong> @country</p>
    <p><strong>City:</strong> @city</p>
    <p><strong>Status:</strong> @status</p>
</div>

<!-- Show products from that specific user -->
@if (ProductToShow == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="grid-container">
        @foreach (var headset in ProductToShow)
        {
            uint productId = headset.Id;
            <div class="card" style="width: 18rem;">
                <img src="@headset.imageUrl" class="card-img-top" alt="...">
                <div class="card-body">
                    <h5 class="card-title">@headset.brand</h5>
                    <h5 class="card-model-text">@headset.model</h5>
                    <div class="card-separator"></div>
                    <p class="card-text" style="text-align: center;">
                        PRICE: <span style="font-weight: bold;">$@headset.price</span>  <br />
                    </p>

                    @if (!string.IsNullOrEmpty(headset.description))
                    {
                        <p class="card-description">@headset.description</p>
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    // To instantiate a new instance of Headset to pull individual user headsets
    public class ConcreteHeadset : Headset
    {
        public ConcreteHeadset(string brand, string model, string color, string frequencyRange, bool microphone,
            string typeOfConnection, bool noiseCancellation, string closedOrOpen, string itemCondition, int price, string imageUrl, string description)
            : base(brand, model, color, frequencyRange, microphone, typeOfConnection, noiseCancellation, closedOrOpen, itemCondition, price, imageUrl, description)
        {

        }
    }

    public List<ConcreteHeadset> ProductToShow;

    private string? username { get; set; }
    private string? firstname { get; set; }
    private string? lastname { get; set; }
    private int? yearofbirth { get; set; }
    private string? email { get; set; }
    private int? phonenumber { get; set; }
    private string? address { get; set; }
    private string? country { get; set; }
    private string? city { get; set; }
    private string? status { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfileAsync();
    }

    private async Task LoadUserProfileAsync()
    {
        string connectionString = "Host=ep-blue-fire-a2nnh5p7.eu-central-1.aws.neon.tech;Username=sonaredb_owner;Password=8LlUVraRtDs9;Database=sonaredb;SSL Mode=Require";

        using var connection = new NpgsqlConnection(connectionString);
        await connection.OpenAsync(); // Async opening of the connection

        using (var cmd = new NpgsqlCommand())
        {
            cmd.Connection = connection;

            // Retrieve the id from the cookie
            int userId = int.Parse(await cookie.GetValue("id"));

            cmd.CommandText = @"
            SELECT username, firstname, lastname, yearofbirth, email, phonenumber, address, country, city, status
            FROM useraccount
            WHERE id = @id";

            cmd.Parameters.AddWithValue("@id", userId);

            using (var reader = await cmd.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    username = reader.GetString(reader.GetOrdinal("username"));
                    firstname = reader.GetString(reader.GetOrdinal("firstname"));
                    lastname = reader.GetString(reader.GetOrdinal("lastname"));
                    yearofbirth = reader.GetInt32(reader.GetOrdinal("yearofbirth"));
                    email = reader.GetString(reader.GetOrdinal("email"));
                    phonenumber = reader.GetInt32(reader.GetOrdinal("phonenumber"));
                    address = reader.GetString(reader.GetOrdinal("address"));
                    country = reader.GetString(reader.GetOrdinal("country"));
                    city = reader.GetString(reader.GetOrdinal("city"));
                    status = reader.GetString(reader.GetOrdinal("status"));
                }
                else
                {
                    // To-do - handle if user not found
                }
            }
        }

        // Fetch headsets related to this user
        using (var cmd = new NpgsqlCommand())
        {
            int userId = int.Parse(await cookie.GetValue("id"));
            cmd.Connection = connection;
            cmd.CommandText = @"
            SELECT * FROM headsets
            WHERE useraccountid = @userId";

            cmd.Parameters.AddWithValue("@userId", userId);

            using (var reader = await cmd.ExecuteReaderAsync())
            {
                ProductToShow = new List<ConcreteHeadset>();
                while (await reader.ReadAsync())
                {
                    var price = reader.IsDBNull(reader.GetOrdinal("price")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("price"));
                    var headset = new ConcreteHeadset(
                        reader.IsDBNull(reader.GetOrdinal("brand")) ? null : reader.GetString(reader.GetOrdinal("brand")),
                        reader.IsDBNull(reader.GetOrdinal("model")) ? null : reader.GetString(reader.GetOrdinal("model")),
                        reader.IsDBNull(reader.GetOrdinal("color")) ? null : reader.GetString(reader.GetOrdinal("color")),
                        reader.IsDBNull(reader.GetOrdinal("frequencyRange")) ? null : reader.GetString(reader.GetOrdinal("frequencyRange")),
                        reader.IsDBNull(reader.GetOrdinal("microphone")) ? false : reader.GetBoolean(reader.GetOrdinal("microphone")),
                        reader.IsDBNull(reader.GetOrdinal("typeOfConnection")) ? null : reader.GetString(reader.GetOrdinal("typeOfConnection")),
                        reader.IsDBNull(reader.GetOrdinal("noiseCancellation")) ? false : reader.GetBoolean(reader.GetOrdinal("noiseCancellation")),
                        reader.IsDBNull(reader.GetOrdinal("closedOrOpen")) ? null : reader.GetString(reader.GetOrdinal("closedOrOpen")),
                        reader.IsDBNull(reader.GetOrdinal("itemCondition")) ? null : reader.GetString(reader.GetOrdinal("itemCondition")),
                        price ?? 0,
                        reader.IsDBNull(reader.GetOrdinal("imageUrl")) ? null : reader.GetString(reader.GetOrdinal("imageUrl")),
                        reader.IsDBNull(reader.GetOrdinal("description")) ? null : reader.GetString(reader.GetOrdinal("description"))
                    );
                    ProductToShow.Add(headset);
                }
            }
        }
    }
}